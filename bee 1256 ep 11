#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int value;
    struct Node* next;
} Node;

void insert(Node** hashTable, int key, int size) {
    int index = key % size;
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->value = key;
    newNode->next = NULL;

    if (hashTable[index] == NULL) {
        hashTable[index] = newNode;
    } else {
        Node* currentNode = hashTable[index];
        while (currentNode->next != NULL) {
            currentNode = currentNode->next;
        }
        currentNode->next = newNode;
    }
}

void printHashTable(Node** hashTable, int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ->", i);

        if (hashTable[i] != NULL) {
            Node* currentNode = hashTable[i];
            while (currentNode != NULL) {
                printf(" %d ->", currentNode->value);
                currentNode = currentNode->next;
            }
        }

        printf(" \\\n");
    }
}

int main() {
    int t;
    scanf("%d", &t);

    while (t--) {
        int size, numKeys;
        scanf("%d %d", &size, &numKeys);

        Node** hashTable = (Node**)malloc(size * sizeof(Node*));
        for (int i = 0; i < size; i++) {
            hashTable[i] = NULL;
        }

        for (int i = 0; i < numKeys; i++) {
            int key;
            scanf("%d", &key);
            insert(hashTable, key, size);
        }

        printHashTable(hashTable, size);

        // Liberar a memória alocada para os nós da tabela
        for (int i = 0; i < size; i++) {
            Node* currentNode = hashTable[i];
            while (currentNode != NULL) {
                Node* temp = currentNode;
                currentNode = currentNode->next;
                free(temp);
            }
        }

        free(hashTable);

        if (t > 0) {
            printf("\n");
        }
    }

    return 0;
}
